typedef near* int32;
typedef far*  int64;

interface String
{
	// these could be part of "Object", but String is the only Object!
	near*       typeInfo; // bottom 4GB
	void        delete();
	far String* clone();
	void        incRef();
	void        decRef();

	void        clear(); // reset to empty
	int32       length();

	void        append_char(char c);
	void        append_near(near String *s);
	void        append_far (far  String *s);

	int32       intVal(int64 *outVal);
	far String* lookup(far String *idx);

	int32       run(StringMap *argDict);
}

/// handy for implementation
class Vector<Type>
{
	int32 len;
	int32 cap;
	near Type *ary;
}

/// a C-string
class CString
{
	char bytes[]; // 0 terminated
}

/// wrap a C-style string in the String interface
/// (strings larger than 4GB should probably be chunked)
class CwrappedStringNear : String
{
	int32 refCnt;
	int32 length;
	near CString* actual;
}

class BasicString : String
{
	int32 refCnt;
	Vector<char> str;
}

class JoinedStringNear : String
{
	int32 refCnt;
	near String*  joinStr;
	Vector<near String*> strings;
}

class BasicMap : String
{
	int32 refCnt;
	Vector<far String*> cmdNames;
	Vector<int64> cmdLocs;
}

//TODO: infinite precision
class IntString : String
{
	int32 refCnt;
   QWord val_;
}

/// an interposer which can be held near, but which points to a far String
class NearStringFar : String
{
	far String* actual;
}

